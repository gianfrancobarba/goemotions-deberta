# config.yaml – configurazione centralizzata per tutto il progetto

model:
  name: "microsoft/deberta-v3-base"
  dir: "/app/model/models"
  num_labels: 27                # oppure 28 se includi 'neutral'
  max_length: 128
  seed: 42
  model_file: "pytorch_model.bin"

training:
  per_device_train_batch_size: 16                 # Modifica in base alla tua GPU
  per_device_eval_batch_size: 32                  # Modifica in base alla tua GPU
  num_train_epochs: 8                             # Numero di epoche per l'addestramento
  learning_rate: 1e-5                             # Modifica in base alla tua configurazione
  warmup_steps: 500                               # Numero di passi di warmup
  weight_decay: 0.01                              # Decadimento del peso per la regolarizzazione
  lr_scheduler_type: "cosine"                     # Tipo di scheduler per il tasso di apprendimento
  evaluation_strategy: "steps"                    # Strategia di valutazione
  eval_steps: 500                                 # Frequenza di valutazione durante l'addestramento
  save_strategy: "steps"                          # Strategia di salvataggio del modello
  save_steps: 500                                 # Frequenza di salvataggio del modello
  save_total_limit: 2                             # Limite per il numero di modelli salvati
  logging_steps: 100                              # Frequenza di logging
  fp16: false                                     # Imposta a true se hai una GPU compatibile con FP16
  max_steps: -1                                   # -1 per usare num_train_epochs    
  load_best_model_at_end: true                    # Carica il miglior modello alla fine dell'addestramento
  metric_for_best_model: "f1_micro"               # Metrica per determinare il miglior modello
  greater_is_better: true                         # Indica se una metrica più alta è migliore
  dataloader_num_workers: 4                       # Numero di worker per il dataloader
  report_to: "none"                               # Imposta a "none" per non usare strumenti di report come TensorBoard o Weights & Biases
  output_dir: "model/models"                      # Cartella di output per i modelli

tuning:
  n_trials: 2
  study_name: "deberta_tuning"
  experiment_name: "deberta_tuning_experiment"
  search_space:
    learning_rate:
      min: 1e-6
      max: 5e-5
    weight_decay:
      min: 0.0
      max: 0.3
    batch_size: [8, 16, 32]
    num_epochs:
      min: 2
      max: 6

thresholding:
  default_threshold: 0.5
  thresholds_path: "model/models/thresholds.json"
  batch_size: 32
  threshold_range:
    start: 0.1
    stop: 0.9
    step: 0.05

labels:
  include_neutral: false
  list:
    - "admiration"
    - "amusement"
    - "anger"
    - "annoyance"
    - "approval"
    - "caring"
    - "confusion"
    - "curiosity"
    - "desire"
    - "disappointment"
    - "disapproval"
    - "disgust"
    - "embarrassment"
    - "excitement"
    - "fear"
    - "gratitude"
    - "grief"
    - "joy"
    - "love"
    - "nervousness"
    - "optimism"
    - "pride"
    - "realization"
    - "relief"
    - "remorse"
    - "sadness"
    - "surprise"
    - "neutral"

sentiment:
  positive:
    - "joy"
    - "love"
    - "gratitude"
    - "relief"
    - "amusement"
    - "optimism"
    - "admiration"
    - "pride"
    - "approval"
    - "caring"
    - "excitement"
    - "contentment"
  negative:
    - "anger"
    - "fear"
    - "sadness"
    - "disappointment"
    - "disgust"
    - "remorse"
    - "grief"
    - "annoyance"
    - "disapproval"
    - "embarrassment"
    - "nervousness"
  neutral:
    - "realization"
    - "curiosity"
    - "confusion"
    - "surprise"

api:
  host: "0.0.0.0"
  port: 8000

surrogate:
  n_perturbations: 25
  threshold: 0.5
  max_depth: 3

mlflow:
  tracking_uri: "file:/app/mlruns"
  experiment_name: "goemotions_deberta_experiment_complete" 
  run_name: "goemotions_deberta_run_complete"             

paths:
  data_dir: "data"
  raw_data_dir: "data/raw"
  tokenized_data_dir: "data/processed"
  model_logs: "model/logs"
  api_logs: "api/logs"      # opzionale per API
  metrics_file: "model/logs/eval_with_thresholds.json"
  metrics_csv: "model/logs/eval_with_thresholds_metrics.csv"
  outputs: "model/logs/tuning"
  thresholds: "model/models/thresholds.json"
  model_dir: "model/models"
  model_file: "model/models/pytorch_model.bin"
  surrogate_dir: "model/surrogate"
  supossorrogate_file: "model/surrogate/surrogate_model.pkl"
  